import envConfig from '../configs/envConfig';
import socketManager from '../configs/socket';

export const socketDebugger = {
  // Test k·∫øt n·ªëi socket
  testConnection() {
    console.log('=== SOCKET DEBUG INFO ===');

    const connectionInfo = socketManager.getConnectionInfo();
    console.log('Connection Info:', connectionInfo);

    if (!socketManager.isConnected()) {
      console.log('Socket not connected. Attempting to connect...');
      const socket = socketManager.connect();

      if (socket) {
        socket.on('connect', () => {
          console.log('‚úÖ Socket connected successfully!');
          this.logConnectionDetails();
        });

        socket.on('connect_error', (error) => {
          console.error('‚ùå Connection failed:', error.message);
          this.suggestFixes(error);
        });
      }
    } else {
      console.log('‚úÖ Socket already connected');
      this.logConnectionDetails();
    }
  },

  // Log chi ti·∫øt connection
  logConnectionDetails() {
    const info = socketManager.getConnectionInfo();
    console.log('üìä Connection Details:');
    console.log('- Socket ID:', info.id);
    console.log('- Namespace:', info.namespace);
    console.log('- Transport:', info.transport);
    console.log('- URL:', info.url);
    console.log('- Status:', info.status);
  },

  // ƒê·ªÅ xu·∫•t c√°ch kh·∫Øc ph·ª•c
  suggestFixes(error) {
    console.log('üîß Suggested fixes:');

    if (error.message?.includes('Invalid namespace')) {
      console.log('‚ùó Invalid Namespace Error:');
      console.log('1. Ki·ªÉm tra server c√≥ h·ªó tr·ª£ namespace "/" kh√¥ng');
      console.log(
        '2. Th·ª≠ k·∫øt n·ªëi v·ªõi namespace kh√°c: socketManager.connectToNamespace("/chat")'
      );
      console.log(
        '3. X√°c minh URL backend: ',
        socketManager.getConnectionInfo().url
      );
    }

    if (error.message?.includes('timeout')) {
      console.log('‚ùó Timeout Error:');
      console.log('1. Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng');
      console.log('2. X√°c minh server ƒëang ch·∫°y');
      console.log('3. Th·ª≠ tƒÉng timeout trong config');
    }

    if (error.message?.includes('CORS')) {
      console.log('‚ùó CORS Error:');
      console.log('1. Ki·ªÉm tra server cho ph√©p origin c·ªßa frontend');
      console.log('2. ƒê·∫£m b·∫£o withCredentials ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng');
    }
  },

  // Test v·ªõi namespace kh√°c
  testNamespace(namespace = '/chat') {
    console.log(`Testing connection to namespace: ${namespace}`);
    socketManager.disconnect();
    socketManager.connectToNamespace(namespace);
  },

  // Reset connection
  resetConnection() {
    console.log('Resetting socket connection...');
    socketManager.disconnect();
    setTimeout(() => {
      socketManager.connect();
    }, 1000);
  },

  // Ki·ªÉm tra server status
  async checkServerStatus() {
    try {
      const backendUrl = envConfig.BACKEND_URL;
      console.log(`Checking server status at: ${backendUrl}`);

      const response = await fetch(`${backendUrl}/health`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        console.log('‚úÖ Server is responding');
        return true;
      } else {
        console.log('‚ùå Server returned error:', response.status);
        return false;
      }
    } catch (error) {
      console.error('‚ùå Server check failed:', error.message);
      return false;
    }
  },
};

// Expose to window for easy debugging
if (typeof window !== 'undefined') {
  window.socketDebugger = socketDebugger;
  window.socketManager = socketManager;
}

export default socketDebugger;
